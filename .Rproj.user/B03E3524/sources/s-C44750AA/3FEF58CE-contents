[1] "#  Evaluation of expressions\n<p>When a user types a command at the prompt (or when an expression is read from a file) the first thing that happens to it is that the command is transformed by the <a href=\"\" id=\"index-parsing-2\"></a> parser into an internal representation. The evaluator executes parsed R expressions and returns the value of the expression. All expressions have a value. This is the core of the language.</p>\n<p>This chapter describes the basic mechanisms of the evaluator, but avoids discussion of specific functions or groups of functions which are described in separate chapters later on or where the help pages should be sufficient documentation.</p>\n<p>Users can construct expressions and invoke the evaluator on them.</p>\n<hr />\n<p><a href=\"\" id=\"Simple-evaluation\"></a> <a href=\"\" id=\"Simple-evaluation-1\"></a></p>\n<h3 id=\"simple-evaluation\" class=\"section\">3.1 Simple evaluation</h3>\n<hr />\n<p><a href=\"\" id=\"Constants\"></a> <a href=\"\" id=\"Constants-1\"></a></p>\n<h4 id=\"constants\" class=\"subsection\">3.1.1 Constants</h4>\n<p>Any number typed directly at the prompt is a constant and is evaluated.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; 1\n[1] 1</code></pre>\n</div>\n<p>Perhaps unexpectedly, the number returned from the expression <code class=\"calibre7\">1</code> is a numeric. In most cases, the difference between an integer and a numeric value will be unimportant as R will do the right thing when using the numbers. There are, however, times when we would like to explicitly create an integer value for a constant. We can do this by calling the function <code class=\"calibre7\">as.integer</code> or using various other techniques. But perhaps the simplest approach is to qualify our constant with the suffix character ‘L’. For example, to create the integer value 1, we might use</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; 1L\n[1]</code></pre>\n</div>\n<p>We can use the ‘L’ suffix to qualify any number with the intent of making it an explicit integer. So ‘0x10L’ creates the integer value 16 from the hexadecimal representation. The constant <code class=\"calibre7\">1e3L</code> gives 1000 as an integer rather than a numeric value and is equivalent to <code class=\"calibre7\">1000L</code>. (Note that the ‘L’ is treated as qualifying the term <code class=\"calibre7\">1e3</code> and not the <code class=\"calibre7\">3</code>.) If we qualify a value with ‘L’ that is not an integer value, e.g. <code class=\"calibre7\">1e-3L</code>, we get a warning and the numeric value is created. A warning is also created if there is an unnecessary decimal point in the number, e.g. <code class=\"calibre7\">1.L</code>.</p>\n<p>We get a syntax error when using ‘L’ with complex numbers, e.g. <code class=\"calibre7\">12iL</code> gives an error.</p>\n<p>Constants are fairly boring and to do more we need symbols.</p>\n<hr />\n<p><a href=\"\" id=\"Symbol-lookup\"></a> <a href=\"\" id=\"Symbol-lookup-1\"></a></p>\n<h4 id=\"symbol-lookup\" class=\"subsection\">3.1.2 Symbol lookup</h4>\n<p>When a new variable is created it must have a <a href=\"\" id=\"index-name-2\"></a> name so it can be referenced and it usually has a value. The name itself is a <a href=\"\" id=\"index-symbol-2\"></a> symbol. When a symbol is <a href=\"\" id=\"index-evaluation_002c-symbol-1\"></a> evaluated its <a href=\"\" id=\"index-value\"></a> value is returned. Later we shall explain in detail how to determine the value associated with a symbol.</p>\n<p>In this small example <code class=\"calibre7\">y</code> is a symbol and its value is 4. A symbol is an R object too, but one rarely needs to deal with symbols directly, except when doing “programming on the language” (<a href=\"object-oriented-programming.html#Computing-on-the-language\">Computing on the language</a>).</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; y &lt;- 4\n&gt; y\n[1] 4</code></pre>\n</div>\n<hr />\n<p><a href=\"\" id=\"Function-calls\"></a> <a href=\"\" id=\"Function-calls-1\"></a></p>\n<h4 id=\"function-calls\" class=\"subsection\">3.1.3 Function calls</h4>\n<p>Most of the computations carried out in R involve the evaluation of functions. We will also refer to this as <a href=\"\" id=\"index-function-invocation\"></a> function <em>invocation</em>. Functions are invoked by name with a list of arguments separated by commas.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; mean(1:10)\n[1] 5.5</code></pre>\n</div>\n<p>In this example the function <code class=\"calibre7\">mean</code> was called with one argument, the vector of integers from 1 to 10.</p>\n<p>R contains a huge number of functions with different purposes. Most are used for producing a result which is an R object, but others are used for their side effects, e.g., printing and plotting functions.</p>\n<p><a href=\"\" id=\"index-function-7\"></a> <a href=\"\" id=\"index-function-arguments\"></a></p>\n<p>Function calls can have <em>tagged</em> (or <em>named</em>) arguments, as in <code class=\"calibre7\">plot(x, y, pch = 3)</code>. Arguments without tags are known as <em>positional</em> since the function must distinguish their meaning from their sequential positions among the arguments of the call, e.g., that <code class=\"calibre7\">x</code> denotes the abscissa variable and <code class=\"calibre7\">y</code> the ordinate. The use of tags/names is an obvious convenience for functions with a large number of optional arguments.</p>\n<p><a href=\"\" id=\"index-function_002c-assignment\"></a></p>\n<p>A special type of function calls can appear on the left hand side of the <a href=\"\" id=\"index-assignment-1\"></a> assignment operator as in</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; class(x) &lt;- &quot;foo&quot;</code></pre>\n</div>\n<p>What this construction really does is to call the function <code class=\"calibre7\">class&lt;-</code> with the original object and the right hand side. This function performs the modification of the object and returns the result which is then stored back into the original variable. (At least conceptually, this is what happens. Some additional effort is made to avoid unnecessary data duplication.)</p>\n<hr />\n<p><a href=\"\" id=\"Operators\"></a> <a href=\"\" id=\"Operators-1\"></a></p>\n<h4 id=\"operators\" class=\"subsection\">3.1.4 Operators</h4>\n<p>R allows the use of arithmetic expressions using operators similar to those of the C programming language, for instance</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; 1 + 2\n[1] 3</code></pre>\n</div>\n<p>Expressions can be grouped using parentheses, mixed with function calls, and assigned to variables in a straightforward manner</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; y &lt;- 2 * (a + log(x))</code></pre>\n</div>\n<p>R contains a number of operators. They are listed in the table below.</p>\n<blockquote>\n<table>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">-</code></td>\n<td align=\"left\">Minus, can be unary or binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">+</code></td>\n<td align=\"left\">Plus, can be unary or binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">!</code></td>\n<td align=\"left\">Unary not</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">~</code></td>\n<td align=\"left\">Tilde, used for model formulae, can be either unary or binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">?</code></td>\n<td align=\"left\">Help</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">:</code></td>\n<td align=\"left\">Sequence, binary (in model formulae: interaction)</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">*</code></td>\n<td align=\"left\">Multiplication, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">/</code></td>\n<td align=\"left\">Division, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">^</code></td>\n<td align=\"left\">Exponentiation, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">%x%</code></td>\n<td align=\"left\">Special binary operators, x can be replaced by any valid name</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">%%</code></td>\n<td align=\"left\">Modulus, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">%/%</code></td>\n<td align=\"left\">Integer divide, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">%*%</code></td>\n<td align=\"left\">Matrix product, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">%o%</code></td>\n<td align=\"left\">Outer product, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">%x%</code></td>\n<td align=\"left\">Kronecker product, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">%in%</code></td>\n<td align=\"left\">Matching operator, binary (in model formulae: nesting)</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">&lt;</code></td>\n<td align=\"left\">Less than, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">&gt;</code></td>\n<td align=\"left\">Greater than, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">==</code></td>\n<td align=\"left\">Equal to, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">&gt;=</code></td>\n<td align=\"left\">Greater than or equal to, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">&lt;=</code></td>\n<td align=\"left\">Less than or equal to, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">&amp;</code></td>\n<td align=\"left\">And, binary, vectorized</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">&amp;&amp;</code></td>\n<td align=\"left\">And, binary, not vectorized</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">|</code></td>\n<td align=\"left\">Or, binary, vectorized</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">||</code></td>\n<td align=\"left\">Or, binary, not vectorized</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">&lt;-</code></td>\n<td align=\"left\">Left assignment, binary</td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><code class=\"calibre7\">-&gt;</code></td>\n<td align=\"left\">Right assignment, binary</td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><code class=\"calibre7\">$</code></td>\n<td align=\"left\">List subset, binary</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Except for the syntax, there is no difference between applying an operator and calling a function. In fact, <code class=\"calibre7\">x + y</code> can equivalently be written <code class=\"calibre7\">`+`(x, y)</code>. Notice that since ‘+’ is a non-standard function name, it needs to be quoted.</p>\n<p><a href=\"\" id=\"index-vector-2\"></a></p>\n<p>R deals with entire vectors of data at a time, and most of the elementary operators and basic mathematical functions like <code class=\"calibre7\">log</code> are vectorized (as indicated in the table above). This means that e.g. adding two vectors of the same length will create a vector containing the element-wise sums, implicitly looping over the vector index. This applies also to other operators like <code class=\"calibre7\">-</code>, <code class=\"calibre7\">*</code>, and <code class=\"calibre7\">/</code> as well as to higher dimensional structures. Notice in particular that multiplying two matrices does not produce the usual matrix product (the <code class=\"calibre7\">%*%</code> operator exists for that purpose). Some finer points relating to vectorized operations will be discussed in <a href=\"#Elementary-arithmetic-operations\">Elementary arithmetic operations</a>.</p>\n<p>To access individual elements of an atomic vector, one generally uses the <code class=\"calibre7\">x[i]</code> construction.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; x &lt;- rnorm(5)\n&gt; x\n[1] -0.12526937 -0.27961154 -1.03718717 -0.08156527  1.37167090\n&gt; x[2]\n[1] -0.2796115</code></pre>\n</div>\n<p>List components are more commonly accessed using <code class=\"calibre7\">x$a</code> or <code class=\"calibre7\">x[[i]]</code>.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; x &lt;- options()\n&gt; x$prompt\n[1] &quot;&gt; &quot;</code></pre>\n</div>\n<p>Indexing constructs can also appear on the right hand side of an <a href=\"\" id=\"index-assignment-2\"></a> assignment.</p>\n<p>Like the other operators, indexing is really done by functions, and one could have used <code class=\"calibre7\">`[`(x, 2)</code> instead of <code class=\"calibre7\">x[2]</code>.</p>\n<p>R’s indexing operations contain many advanced features which are further described in <a href=\"#Indexing\">Indexing</a>.</p>\n<hr />\n<p><a href=\"\" id=\"Control-structures\"></a> <a href=\"\" id=\"Control-structures-1\"></a></p>\n<h3 id=\"control-structures\" class=\"section\">3.2 Control structures</h3>\n<p>Computation in R consists of sequentially evaluating <em>statements</em>. Statements, such as <code class=\"calibre7\">x&lt;-1:10</code> or <code class=\"calibre7\">mean(y)</code>, can be separated by either a semi-colon or a new line. Whenever the <a href=\"\" id=\"index-evaluation_002c-statement\"></a> evaluator is presented with a syntactically complete statement that statement is evaluated and the <em>value</em> returned. The result of evaluating a statement can be referred to as the value of the statement<a href=\"appendix-a-references.html#FOOT2\" id=\"DOCF2\"><sup>2</sup></a> The value can always be assigned to a symbol.</p>\n<p>Both semicolons and new lines can be used to separate statements. A semicolon always indicates the end of a statement while a new line <em>may</em> indicate the end of a statement. If the current statement is not syntactically complete new lines are simply ignored by the evaluator. If the session is interactive the prompt changes from ‘&gt;’ to ‘+’.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; x &lt;- 0; x + 5\n[1] 5\n&gt; y &lt;- 1:10\n&gt; 1; 2\n[1] 1\n[1] 2</code></pre>\n</div>\n<p>Statements can be grouped together using braces ‘{’ and ‘}’. A group of statements is sometimes called a <em>block</em>. Single statements are evaluated when a new line is typed at the end of the syntactically complete statement. Blocks are not evaluated until a new line is entered after the closing brace. In the remainder of this section, <em>statement</em> refers to either a single statement or a block.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; { x &lt;- 0\n+ x + 5\n+ }\n[1] 5</code></pre>\n</div>\n<hr />\n<p><a href=\"\" id=\"if\"></a> <a href=\"\" id=\"if-1\"></a></p>\n<h4 id=\"if\" class=\"subsection\">3.2.1 if</h4>\n<p>The <code class=\"calibre7\">if</code>/<code class=\"calibre7\">else</code> statement conditionally evaluates two statements. There is a <em>condition</em> which is evaluated and if the <em>value</em> is <code class=\"calibre7\">TRUE</code> then the first statement is evaluated; otherwise the second statement will be evaluated. The <code class=\"calibre7\">if</code>/<code class=\"calibre7\">else</code> statement returns, as its value, the value of the statement that was selected. The formal syntax is</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>if ( statement1 )\n    statement2\nelse\n    statement3</code></pre>\n</div>\n<p>First, statement1 is evaluated to yield value1. If value1 is a logical vector with first element <code class=\"calibre7\">TRUE</code> then statement2 is evaluated. If the first element of value1 is <code class=\"calibre7\">FALSE</code> then statement3 is evaluated. If value1 is a numeric vector then statement3 is evaluated when the first element of value1 is zero and otherwise statement2 is evaluated. Only the first element of value1 is used. All other elements are ignored. If value1 has any type other than a logical or a numeric vector an error is signalled.</p>\n<p><code class=\"calibre7\">if</code>/<code class=\"calibre7\">else</code> statements can be used to avoid numeric problems such as taking the logarithm of a negative number. Because <code class=\"calibre7\">if</code>/<code class=\"calibre7\">else</code> statements are the same as other statements you can assign the value of them. The two examples below are equivalent.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; if( any(x &lt;= 0) ) y &lt;- log(1+x) else y &lt;- log(x)\n&gt; y &lt;- if( any(x &lt;= 0) ) log(1+x) else log(x)</code></pre>\n</div>\n<p>The <code class=\"calibre7\">else</code> clause is optional. The statement <code class=\"calibre7\">if(any(x &lt;= 0)) x &lt;- x[x &lt;= 0]</code> is valid. When the <code class=\"calibre7\">if</code> statement is not in a block the <code class=\"calibre7\">else</code>, if present, must appear on the same line as the end of statement2. Otherwise the new line at the end of statement2 completes the <code class=\"calibre7\">if</code> and yields a syntactically complete statement that is evaluated. A simple solution is to use a compound statement wrapped in braces, putting the <code class=\"calibre7\">else</code> on the same line as the closing brace that marks the end of the statement.</p>\n<p><code class=\"calibre7\">if</code>/<code class=\"calibre7\">else</code> statements can be nested.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>if ( statement1 ) {\n    statement2\n} else if ( statement3 ) {\n    statement4\n} else if ( statement5 ) {\n    statement6\n} else\n    statement8</code></pre>\n</div>\n<p>One of the even numbered statements will be evaluated and the resulting value returned. If the optional <code class=\"calibre7\">else</code> clause is omitted and all the odd numbered statements evaluate to <code class=\"calibre7\">FALSE</code> no statement will be evaluated and <code class=\"calibre7\">NULL</code> is returned.</p>\n<p>The odd numbered statements are evaluated, in order, until one evaluates to <code class=\"calibre7\">TRUE</code> and then the associated even numbered statement is evaluated. In this example, statement6 will only be evaluated if statement1 is <code class=\"calibre7\">FALSE</code> and statement3 is <code class=\"calibre7\">FALSE</code> and statement5 is <code class=\"calibre7\">TRUE</code>. There is no limit to the number of <code class=\"calibre7\">else if</code> clauses that are permitted.</p>\n<hr />\n<p><a href=\"\" id=\"Looping\"></a> <a href=\"\" id=\"Looping-1\"></a></p>\n<h4 id=\"looping\" class=\"subsection\">3.2.2 Looping</h4>\n<p>R has three statements that provide explicit looping.<a href=\"appendix-a-references.html#FOOT3\" id=\"DOCF3\"><sup>3</sup></a> They are <code class=\"calibre7\">for</code>, <code class=\"calibre7\">while</code> and <code class=\"calibre7\">repeat</code>. The two built-in constructs, <code class=\"calibre7\">next</code> and <code class=\"calibre7\">break</code>, provide additional control over the evaluation. R provides other functions for implicit looping such as <code class=\"calibre7\">tapply</code>, <code class=\"calibre7\">apply</code>, and <code class=\"calibre7\">lapply</code>. In addition many operations, especially arithmetic ones, are vectorized so you may not need to use a loop.</p>\n<p>There are two statements that can be used to explicitly control looping. They are <code class=\"calibre7\">break</code> and <code class=\"calibre7\">next</code>. <a href=\"\" id=\"index-break\"></a> <a href=\"\" id=\"index-next\"></a> The <code class=\"calibre7\">break</code> statement causes an exit from the innermost loop that is currently being executed. The <code class=\"calibre7\">next</code> statement immediately causes control to return to the start of the loop. The next iteration of the loop (if there is one) is then executed. No statement below <code class=\"calibre7\">next</code> in the current loop is evaluated.</p>\n<p>The value returned by a loop statement is always <code class=\"calibre7\">NULL</code> and is returned invisibly.</p>\n<hr />\n<p><a href=\"\" id=\"repeat\"></a> <a href=\"\" id=\"repeat-1\"></a></p>\n<h4 id=\"repeat\" class=\"subsection\">3.2.3 repeat</h4>\n<p><a href=\"\" id=\"index-repeat\"></a></p>\n<p>The <code class=\"calibre7\">repeat</code> statement causes repeated evaluation of the body until a break is specifically requested. This means that you need to be careful when using <code class=\"calibre7\">repeat</code> because of the danger of an infinite loop. The syntax of the <code class=\"calibre7\">repeat</code> loop is</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>repeat statement</code></pre>\n</div>\n<p>When using <code class=\"calibre7\">repeat</code>, statement must be a block statement. You need to both perform some computation and test whether or not to break from the loop and usually this requires two statements.</p>\n<hr />\n<p><a href=\"\" id=\"while\"></a> <a href=\"\" id=\"while-1\"></a></p>\n<h4 id=\"while\" class=\"subsection\">3.2.4 while</h4>\n<p><a href=\"\" id=\"index-while\"></a></p>\n<p>The <code class=\"calibre7\">while</code> statement is very similar to the <code class=\"calibre7\">repeat</code> statement. The syntax of the <code class=\"calibre7\">while</code> loop is</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>while ( statement1 ) statement2</code></pre>\n</div>\n<p>where statement1 is evaluated and if its value is <code class=\"calibre7\">TRUE</code> then statement2 is evaluated. This process continues until statement1 evaluates to <code class=\"calibre7\">FALSE</code>.</p>\n<hr />\n<p><a href=\"\" id=\"for\"></a> <a href=\"\" id=\"for-1\"></a></p>\n<h4 id=\"for\" class=\"subsection\">3.2.5 for</h4>\n<p><a href=\"\" id=\"index-for\"></a></p>\n<p>The syntax of the <code class=\"calibre7\">for</code> loop is</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>for ( name in vector )\n   statement1</code></pre>\n</div>\n<p>where vector can be either a vector or a list. For each element in vector the variable name is set to the value of that element and statement1 is evaluated. A side effect is that the variable name still exists after the loop has concluded and it has the value of the last element of vector that the loop was evaluated for.</p>\n<hr />\n<p><a href=\"\" id=\"switch\"></a> <a href=\"\" id=\"switch-1\"></a></p>\n<h4 id=\"switch\" class=\"subsection\">3.2.6 switch</h4>\n<p><a href=\"\" id=\"index-switch\"></a></p>\n<p>Technically speaking, <code class=\"calibre7\">switch</code> is just another function, but its semantics are close to those of control structures of other programming languages.</p>\n<p>The syntax is</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>switch (statement, list)</code></pre>\n</div>\n<p>where the elements of list may be named. First, statement is evaluated and the result, value, obtained. If value is a number between 1 and the length of list then the corresponding element of list is evaluated and the result returned. If value is too large or too small <code class=\"calibre7\">NULL</code> is returned.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; x &lt;- 3\n&gt; switch(x, 2+2, mean(1:10), rnorm(5))\n[1]  2.2903605  2.3271663 -0.7060073  1.3622045 -0.2892720\n&gt; switch(2, 2+2, mean(1:10), rnorm(5))\n[1] 5.5\n&gt; switch(6, 2+2, mean(1:10), rnorm(5))\nNULL</code></pre>\n</div>\n<p>If value is a character vector then the element of ‘...’ with a name that exactly matches value is evaluated. If there is no match a single unnamed argument will be used as a default. If no default is specified, <code class=\"calibre7\">NULL</code> is returned.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; y &lt;- &quot;fruit&quot;\n&gt; switch(y, fruit = &quot;banana&quot;, vegetable = &quot;broccoli&quot;, &quot;Neither&quot;)\n[1] &quot;banana&quot;\n&gt; y &lt;- &quot;meat&quot;\n&gt; switch(y, fruit = &quot;banana&quot;, vegetable = &quot;broccoli&quot;, &quot;Neither&quot;)\n[1] &quot;Neither&quot;</code></pre>\n</div>\n<p>A common use of <code class=\"calibre7\">switch</code> is to branch according to the character value of one of the arguments to a function.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; centre &lt;- function(x, type) {\n+ switch(type,\n+        mean = mean(x),\n+        median = median(x),\n+        trimmed = mean(x, trim = .1))\n+ }\n&gt; x &lt;- rcauchy(10)\n&gt; centre(x, &quot;mean&quot;)\n[1] 0.8760325\n&gt; centre(x, &quot;median&quot;)\n[1] 0.5360891\n&gt; centre(x, &quot;trimmed&quot;)\n[1] 0.6086504</code></pre>\n</div>\n<p><code class=\"calibre7\">switch</code> returns either the value of the statement that was evaluated or <code class=\"calibre7\">NULL</code> if no statement was evaluated.</p>\n<p>To choose from a list of alternatives that already exists <code class=\"calibre7\">switch</code> may not be the best way to select one for evaluation. It is often better to use <code class=\"calibre7\">eval</code> and the subset operator, <code class=\"calibre7\">[[</code>, directly via <code class=\"calibre7\">eval(x[[condition]])</code>.</p>\n<hr />\n<p><a href=\"\" id=\"Elementary-arithmetic-operations\"></a> <a href=\"\" id=\"Elementary-arithmetic-operations-1\"></a></p>\n<h3 id=\"elementary-arithmetic-operations\" class=\"section\">3.3 Elementary arithmetic operations</h3>\n<p>In this section, we discuss the finer points of the rules that apply to basic operation like addition or multiplication of two vectors or matrices.</p>\n<hr />\n<p><a href=\"\" id=\"Recycling-rules\"></a> <a href=\"\" id=\"Recycling-rules-1\"></a></p>\n<h4 id=\"recycling-rules\" class=\"subsection\">3.3.1 Recycling rules</h4>\n<p>If one tries to add two structures with a different number of elements, then the shortest is recycled to length of longest. That is, if for instance you add <code class=\"calibre7\">c(1, 2, 3)</code> to a six-element vector then you will really add <code class=\"calibre7\">c(1, 2, 3, 1, 2, 3)</code>. If the length of the longer vector is not a multiple of the shorter one, a warning is given.</p>\n<p>As from R 1.4.0, any arithmetic operation involving a zero-length vector has a zero-length result.</p>\n<hr />\n<p><a href=\"\" id=\"Propagation-of-names\"></a> <a href=\"\" id=\"Propagation-of-names-1\"></a></p>\n<h4 id=\"propagation-of-names\" class=\"subsection\">3.3.2 Propagation of names</h4>\n<p><a href=\"\" id=\"index-name-3\"></a></p>\n<p>propagation of names (first one wins, I think - also if it has no names?? —- first one *with names* wins, recycling causes shortest to lose names)</p>\n<hr />\n<p><a href=\"\" id=\"Dimensional-attributes\"></a> <a href=\"\" id=\"Dimensional-attributes-1\"></a></p>\n<h4 id=\"dimensional-attributes\" class=\"subsection\">3.3.3 Dimensional attributes</h4>\n<p>(matrix+matrix, dimensions must match. vector+matrix: first recycle, then check if dims fit, error if not)</p>\n<hr />\n<p><a href=\"\" id=\"NA-handling\"></a> <a href=\"\" id=\"NA-handling-1\"></a></p>\n<h4 id=\"na-handling\" class=\"subsection\">3.3.4 NA handling</h4>\n<p>Missing values in the statistical sense, that is, variables whose value is not known, have the value <code class=\"calibre7\">NA</code>. This should not be confused with the <code class=\"calibre7\">missing</code> property for a function argument that has not been supplied (see <a href=\"functions.html#Arguments\">Arguments</a>). <a href=\"\" id=\"index-missing\"></a> <a href=\"\" id=\"index-NA\"></a> <a href=\"\" id=\"index-NaN\"></a></p>\n<p><a href=\"\" id=\"index-type-5\"></a></p>\n<p>As the elements of an atomic vector must be of the same type there are multiple types of <code class=\"calibre7\">NA</code> values. There is one case where this is particularly important to the user. The default type of <code class=\"calibre7\">NA</code> is <code class=\"calibre7\">logical</code>, unless coerced to some other type, so the appearance of a missing value may trigger logical rather than numeric indexing (see <a href=\"#Indexing\">Indexing</a> for details).</p>\n<p>Numeric and logical calculations with <code class=\"calibre7\">NA</code> generally return <code class=\"calibre7\">NA</code>. In cases where the result of the operation would be the same for all possible values the <code class=\"calibre7\">NA</code> could take, the operation may return this value. In particular, ‘FALSE &amp; NA’ is <code class=\"calibre7\">FALSE</code>, ‘TRUE | NA’ is <code class=\"calibre7\">TRUE</code>. <code class=\"calibre7\">NA</code> is not equal to any other value or to itself; testing for <code class=\"calibre7\">NA</code> is done using <code class=\"calibre7\">is.na</code>. <a href=\"\" id=\"index-is_002ena\"></a> However, an <code class=\"calibre7\">NA</code> value will match another <code class=\"calibre7\">NA</code> value in <code class=\"calibre7\">match</code>.</p>\n<p>Numeric calculations whose result is undefined, such as ‘0/0’, produce the value <code class=\"calibre7\">NaN</code>. This exists only in the <code class=\"calibre7\">double</code> type and for real or imaginary components of the complex type. The function <code class=\"calibre7\">is.nan</code> is provided to check specifically for <a href=\"\" id=\"index-is_002enan\"></a> <code class=\"calibre7\">NaN</code>, <code class=\"calibre7\">is.na</code> also returns <code class=\"calibre7\">TRUE</code> for <code class=\"calibre7\">NaN</code>. <a href=\"\" id=\"index-coercion-4\"></a> Coercing <code class=\"calibre7\">NaN</code> to logical or integer type gives an <code class=\"calibre7\">NA</code> of the appropriate type, but coercion to character gives the string <code class=\"calibre7\">&quot;NaN&quot;</code>. <code class=\"calibre7\">NaN</code> values are incomparable so tests of equality or collation involving <code class=\"calibre7\">NaN</code> will result in <code class=\"calibre7\">NA</code>. They are regarded as matching any <code class=\"calibre7\">NaN</code> value (and no other value, not even <code class=\"calibre7\">NA</code>) by <code class=\"calibre7\">match</code>.</p>\n<p>The <code class=\"calibre7\">NA</code> of character type is as from R 1.5.0 distinct from the string <code class=\"calibre7\">&quot;NA&quot;</code>. Programmers who need to specify an explicit string <code class=\"calibre7\">NA</code> should use ‘as.character(NA)’ rather than <code class=\"calibre7\">&quot;NA&quot;</code>, or set elements to <code class=\"calibre7\">NA</code> using <code class=\"calibre7\">is.na&lt;-</code>.</p>\n<p>There are constants <code class=\"calibre7\">NA_integer_</code>, <code class=\"calibre7\">NA_real_</code>, <code class=\"calibre7\">NA_complex_</code> and <code class=\"calibre7\">NA_character_</code> which will generate (in the parser) an <code class=\"calibre7\">NA</code> value of the appropriate type, and will be used in deparsing when it is not otherwise possible to identify the type of an <code class=\"calibre7\">NA</code> (and the <code class=\"calibre7\">control</code> options ask for this to be done).</p>\n<p>There is no <code class=\"calibre7\">NA</code> value for raw vectors.</p>\n<hr />\n<p><a href=\"\" id=\"Indexing\"></a> <a href=\"\" id=\"Indexing-1\"></a></p>\n<h3 id=\"indexing\" class=\"section\">3.4 Indexing</h3>\n<p>R contains several constructs which allow access to individual elements or subsets through indexing operations. In the case of the basic vector types one can access the i-th element using <code class=\"calibre7\">x[i]</code>, but there is also indexing of lists, matrices, and multi-dimensional arrays. There are several forms of indexing in addition to indexing with a single integer. Indexing can be used both to extract part of an object and to replace parts of an object (or to add parts).</p>\n<p>R has three basic indexing operators, with syntax displayed by the following examples</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>x[i]\nx[i, j]\nx[[i]]\nx[[i, j]]\nx$a\nx$&quot;a&quot;</code></pre>\n</div>\n<p><a href=\"\" id=\"index-_005b\"></a> <a href=\"\" id=\"index-_005b_005b\"></a> <a href=\"\" id=\"index-_0024\"></a> <a href=\"\" id=\"index-index-2\"></a></p>\n<p>For vectors and matrices the <code class=\"calibre7\">[[</code> forms are rarely used, although they have some slight semantic differences from the <code class=\"calibre7\">[</code> form (e.g. it drops any <code class=\"calibre7\">names</code> or <code class=\"calibre7\">dimnames</code> attribute, and that partial matching is used for character indices). When indexing multi-dimensional structures with a single index, <code class=\"calibre7\">x[[i]]</code> or <code class=\"calibre7\">x[i]</code> will return the <code class=\"calibre7\">i</code>th sequential element of <code class=\"calibre7\">x</code>.</p>\n<p>For lists, one generally uses <code class=\"calibre7\">[[</code> to select any single element, whereas <code class=\"calibre7\">[</code> returns a list of the selected elements.</p>\n<p>The <code class=\"calibre7\">[[</code> form allows only a single element to be selected using integer or character indices, whereas <code class=\"calibre7\">[</code> allows indexing by vectors. Note though that for a list or other recursive object, the index can be a vector and each element of the vector is applied in turn to the list, the selected component, the selected component of that component, and so on. The result is still a single element.</p>\n<p>The form using <code class=\"calibre7\">$</code> applies to recursive objects such as lists and pairlists. It allows only a literal character string or a symbol as the index. That is, the index is not computable: for cases where you need to evaluate an expression to find the index, use <code class=\"calibre7\">x[[expr]]</code>. Applying <code class=\"calibre7\">$</code> to a non-recursive object is an error.</p>\n<hr />\n<p><a href=\"\" id=\"Indexing-by-vectors\"></a> <a href=\"\" id=\"Indexing-by-vectors-1\"></a></p>\n<h4 id=\"indexing-by-vectors\" class=\"subsection\">3.4.1 Indexing by vectors</h4>\n<p>R allows some powerful constructions using vectors as indices. We shall discuss indexing of simple vectors first. For simplicity, assume that the expression is <code class=\"calibre7\">x[i]</code>. Then the following possibilities exist according to the type of <code class=\"calibre7\">i</code>.</p>\n<ul>\n<li><p><a href=\"\" id=\"index-index-3\"></a> <strong>Integer</strong>. All elements of <code class=\"calibre7\">i</code> must have the same sign. If they are positive, the elements of <code class=\"calibre7\">x</code> with those index numbers are selected. If <code class=\"calibre7\">i</code> contains negative elements, all elements except those indicated are selected.</p>\n<p>If <code class=\"calibre7\">i</code> is positive and exceeds <code class=\"calibre7\">length(x)</code> then the corresponding selection is <code class=\"calibre7\">NA</code>. Negative out of bounds values for <code class=\"calibre7\">i</code> are silently disregarded since R version 2.6.0, S compatibly, as they mean to drop non-existing elements and that is an empty operation (“no-op”).</p>\n<p>A special case is the zero index, which has null effects: <code class=\"calibre7\">x[0]</code> is an empty vector and otherwise including zeros among positive or negative indices has the same effect as if they were omitted.</p></li>\n<li><strong>Other numeric</strong>. Non-integer values are converted to integer (by truncation towards zero) before use.</li>\n<li><strong>Logical</strong>. The indexing <code class=\"calibre7\">i</code> should generally have the same length as <code class=\"calibre7\">x</code>. If it is shorter, then its elements will be recycled as discussed in <a href=\"#Elementary-arithmetic-operations\">Elementary arithmetic operations</a>. If it is longer, then <code class=\"calibre7\">x</code> is conceptually extended with <code class=\"calibre7\">NA</code>s. The selected values of <code class=\"calibre7\">x</code> are those for which <code class=\"calibre7\">i</code> is <code class=\"calibre7\">TRUE</code>.</li>\n<li><a href=\"\" id=\"index-partial-matching\"></a> <strong>Character</strong>. The strings in <code class=\"calibre7\">i</code> are matched against the names attribute of <code class=\"calibre7\">x</code> and the resulting integers are used. For <code class=\"calibre7\">[[</code> and <code class=\"calibre7\">$</code> partial matching is used if exact matching fails, so <code class=\"calibre7\">x$aa</code> will match <code class=\"calibre7\">x$aabb</code> if <code class=\"calibre7\">x</code> does not contain a component named <code class=\"calibre7\">&quot;aa&quot;</code> and <code class=\"calibre7\">&quot;aabb&quot;</code> is the only name which has prefix <code class=\"calibre7\">&quot;aa&quot;</code>. For <code class=\"calibre7\">[[</code>, partial matching can be controlled via the <code class=\"calibre7\">exact</code> argument which defaults to <code class=\"calibre7\">NA</code> indicating that partial matching is allowed, but should result in a warning when it occurs. Setting <code class=\"calibre7\">exact</code> to <code class=\"calibre7\">TRUE</code> prevents partial matching from occurring, a <code class=\"calibre7\">FALSE</code> value allows it and does not issue any warnings. Note that <code class=\"calibre7\">[</code> always requires an exact match. The string <code class=\"calibre7\">&quot;&quot;</code> is treated specially: it indicates ‘no name’ and matches no element (not even those without a name). Note that partial matching is only used when extracting and not when replacing.</li>\n<li><strong>Factor</strong>. The result is identical to <code class=\"calibre7\">x[as.integer(i)]</code>. The factor levels are never used. If so desired, use <code class=\"calibre7\">x[as.character(i)]</code> or a similar construction.</li>\n<li><strong>Empty</strong>. The expression <code class=\"calibre7\">x[]</code> returns <code class=\"calibre7\">x</code>, but drops “irrelevant” attributes from the result. Only <code class=\"calibre7\">names</code> and in multi-dimensional arrays <code class=\"calibre7\">dim</code> and <code class=\"calibre7\">dimnames</code> attributes are retained.</li>\n<li><strong>NULL</strong>. This is treated as if it were <code class=\"calibre7\">integer(0)</code>.</li>\n</ul>\n<p>Indexing with a missing (i.e. <code class=\"calibre7\">NA</code>) value gives an <code class=\"calibre7\">NA</code> result. This rule applies also to the case of logical indexing, i.e. the elements of <code class=\"calibre7\">x</code> that have an <code class=\"calibre7\">NA</code> selector in <code class=\"calibre7\">i</code> get included in the result, but their value will be <code class=\"calibre7\">NA</code>. <a href=\"\" id=\"index-NA-1\"></a></p>\n<p>Notice however, that there are different modes of <code class=\"calibre7\">NA</code>—the literal constant is of mode <code class=\"calibre7\">&quot;logical&quot;</code>, but it is frequently automatically coerced to other types. One effect of this is that <code class=\"calibre7\">x[NA]</code> has the length of <code class=\"calibre7\">x</code>, but <code class=\"calibre7\">x[c(1, NA)]</code> has length 2. That is because the rules for logical indices apply in the former case, but those for integer indices in the latter.</p>\n<p>Indexing with <code class=\"calibre7\">[</code> will also carry out the relevant subsetting of any names attributes.</p>\n<hr />\n<p><a href=\"\" id=\"Indexing-matrices-and-arrays\"></a> <a href=\"\" id=\"Indexing-matrices-and-arrays-1\"></a></p>\n<h4 id=\"indexing-matrices-and-arrays\" class=\"subsection\">3.4.2 Indexing matrices and arrays</h4>\n<p><a href=\"\" id=\"index-index-4\"></a></p>\n<p>Subsetting multi-dimensional structures generally follows the same rules as single-dimensional indexing for each index variable, with the relevant component of <code class=\"calibre7\">dimnames</code> taking the place of <code class=\"calibre7\">names</code>. A couple of special rules apply, though:</p>\n<p>Normally, a structure is accessed using the number of indices corresponding to its dimension. It is however also possible to use a single index in which case the <code class=\"calibre7\">dim</code> and <code class=\"calibre7\">dimnames</code> attributes are disregarded and the result is effectively that of <code class=\"calibre7\">c(m)[i]</code>. Notice that <code class=\"calibre7\">m[1]</code> is usually very different from <code class=\"calibre7\">m[1, ]</code> or <code class=\"calibre7\">m[, 1]</code>.</p>\n<p>It is possible to use a matrix of integers as an index. In this case, the number of columns of the matrix should match the number of dimensions of the structure, and the result will be a vector with length as the number of rows of the matrix. The following example shows how to extract the elements <code class=\"calibre7\">m[1, 1]</code> and <code class=\"calibre7\">m[2, 2]</code> in one operation.</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>&gt; m &lt;- matrix(1:4, 2)\n&gt; m\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n&gt; i &lt;- matrix(c(1, 1, 2, 2), 2, byrow = TRUE)\n&gt; i\n     [,1] [,2]\n[1,]    1    1\n[2,]    2    2\n&gt; m[i]\n[1] 1 4</code></pre>\n</div>\n<p>Indexing matrices may not contain negative indices. <code class=\"calibre7\">NA</code> and zero values are allowed: rows in an index matrix containing a zero are ignored, whereas rows containing an <code class=\"calibre7\">NA</code> produce an <code class=\"calibre7\">NA</code> in the result.</p>\n<p>Both in the case of using a single <a href=\"\" id=\"index-index-5\"></a> index and in matrix indexing, a <code class=\"calibre7\">names</code> attribute is used if present, as had the structure been one-dimensional.</p>\n<p>If an indexing operation causes the result to have one of its extents of length one, as in selecting a single slice of a three-dimensional matrix with (say) <code class=\"calibre7\">m[2, , ]</code>, the corresponding dimension is generally dropped from the result. If a single-dimensional structure results, a vector is obtained. This is occasionally undesirable and can be turned off by adding the ‘drop = FALSE’ to the indexing operation. Notice that this is an additional argument to the <code class=\"calibre7\">[</code> function and doesn’t add to the index count. Hence the correct way of selecting the first row of a matrix as a <em>1</em> by <em>n</em> matrix is <code class=\"calibre7\">m[1, , drop = FALSE]</code>. Forgetting to disable the dropping feature is a common cause of failure in general subroutines where an index occasionally, but not usually has length one. This rule still applies to a one-dimensional array, where any subsetting will give a vector result unless ‘drop = FALSE’ is used.</p>\n<p>Notice that vectors are distinct from one-dimensional arrays in that the latter have <code class=\"calibre7\">dim</code> and <code class=\"calibre7\">dimnames</code> attributes (both of length one). One-dimensional arrays are not easily obtained from subsetting operations but they can be constructed explicitly and are returned by <code class=\"calibre7\">table</code>. This is sometimes useful because the elements of the <code class=\"calibre7\">dimnames</code> list may themselves be named, which is not the case for the <code class=\"calibre7\">names</code> attribute.</p>\n<p>Some operations such as <code class=\"calibre7\">m[FALSE, ]</code> result in structures in which a dimension has zero extent. R generally tries to handle these structures sensibly.</p>\n<hr />\n<p><a href=\"\" id=\"Indexing-other-structures\"></a> <a href=\"\" id=\"Indexing-other-structures-1\"></a></p>\n<h4 id=\"indexing-other-structures\" class=\"subsection\">3.4.3 Indexing other structures</h4>\n<p>The operator <code class=\"calibre7\">[</code> is a generic function which allows class methods to be added, and the <code class=\"calibre7\">$</code> and <code class=\"calibre7\">[[</code> operators likewise. Thus, it is possible to have user-defined indexing operations for any structure. Such a function, say <code class=\"calibre7\">[.foo</code> is called with a set of arguments of which the first is the structure being indexed and the rest are the indices. In the case of <code class=\"calibre7\">$</code>, the index argument is of mode <code class=\"calibre7\">&quot;symbol&quot;</code> even when using the <code class=\"calibre7\">x$&quot;abc&quot;</code> form. It is important to be aware that class methods do not necessarily behave in the same way as the basic methods, for example with respect to partial matching.</p>\n<p>The most important example of a class method for <code class=\"calibre7\">[</code> is that used for data frames. It is not described in detail here (see the help page for <code class=\"calibre7\">[.data.frame</code>), but in broad terms, if two indices are supplied (even if one is empty) it creates matrix-like indexing for a structure that is basically a list of vectors of the same length. If a single index is supplied, it is interpreted as indexing the list of columns—in that case the <code class=\"calibre7\">drop</code> argument is ignored, with a warning.</p>\n<p>The basic operators <code class=\"calibre7\">$</code> and <code class=\"calibre7\">[[</code> can be applied to environments. Only character indices are allowed and no partial matching is done.</p>\n<hr />\n<p><a href=\"\" id=\"Subset-assignment\"></a> <a href=\"\" id=\"Subset-assignment-1\"></a></p>\n<h4 id=\"subset-assignment\" class=\"subsection\">3.4.4 Subset assignment</h4>\n<p><a href=\"\" id=\"index-assignment-3\"></a> <a href=\"\" id=\"index-complex-assignment\"></a></p>\n<p>Assignment to subsets of a structure is a special case of a general mechanism for complex assignment:</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>x[3:5] &lt;- 13:15</code></pre>\n</div>\n<p>The result of this command is as if the following had been executed</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- x\nx &lt;- &quot;[&lt;-&quot;(`*tmp*`, 3:5, value=13:15)\nrm(`*tmp*`)</code></pre>\n</div>\n<p>Note that the index is first converted to a numeric index and then the elements are replaced sequentially along the numeric index, as if a <code class=\"calibre7\">for</code> loop had been used. Any existing variable called <code class=\"calibre7\">`*tmp*`</code> will be overwritten and deleted, and this variable name should not be used in code.</p>\n<p>The same mechanism can be applied to functions other than <code class=\"calibre7\">[</code>. The replacement function has the same name with <code class=\"calibre7\">&lt;-</code> pasted on. Its last argument, which must be called <code class=\"calibre7\">value</code>, is the new value to be assigned. For example,</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>names(x) &lt;- c(&quot;a&quot;,&quot;b&quot;)</code></pre>\n</div>\n<p>is equivalent to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- x\nx &lt;- &quot;names&lt;-&quot;(`*tmp*`, value=c(&quot;a&quot;,&quot;b&quot;))\nrm(`*tmp*`)</code></pre>\n</div>\n<p>Nesting of complex assignments is evaluated recursively</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>names(x)[3] &lt;- &quot;Three&quot;</code></pre>\n</div>\n<p>is equivalent to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- x\nx &lt;- &quot;names&lt;-&quot;(`*tmp*`, value=&quot;[&lt;-&quot;(names(`*tmp*`), 3, value=&quot;Three&quot;))\nrm(`*tmp*`)</code></pre>\n</div>\n<p>Complex assignments in the enclosing environment (using <code class=\"calibre7\">&lt;&lt;-</code>) are also permitted:</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>names(x)[3] &lt;&lt;- &quot;Three&quot;</code></pre>\n</div>\n<p>is equivalent to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;&lt;- get(x, envir=parent.env(), inherits=TRUE)\nnames(`*tmp*`)[3] &lt;- &quot;Three&quot;\nx &lt;&lt;- `*tmp*`\nrm(`*tmp*`)</code></pre>\n</div>\n<p>and also to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- get(x,envir=parent.env(), inherits=TRUE)\nx &lt;&lt;- &quot;names&lt;-&quot;(`*tmp*`, value=&quot;[&lt;-&quot;(names(`*tmp*`), 3, value=&quot;Three&quot;))\nrm(`*tmp*`)</code></pre>\n</div>\n<p>Only the target variable is evaluated in the enclosing environment, so</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>e&lt;-c(a=1,b=2)\ni&lt;-1\nlocal({\n   e &lt;- c(A=10,B=11)\n   i &lt;-2\n   e[i] &lt;&lt;- e[i]+1\n})</code></pre>\n</div>\n<p>uses the local value of <code class=\"calibre7\">i</code> on both the LHS and RHS, and the local value of <code class=\"calibre7\">e</code> on the RHS of the superassignment statement. It sets <code class=\"calibre7\">e</code> in the outer environment to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code> a  b \n 1 12</code></pre>\n</div>\n<p>That is, the superassignment is equivalent to the four lines</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- get(e, envir=parent.env(), inherits=TRUE)\n`*tmp*`[i] &lt;- e[i]+1\ne &lt;&lt;- `*tmp*`\nrm(`*tmp*`)</code></pre>\n</div>\n<p>Similarly</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>x[is.na(x)] &lt;&lt;- 0</code></pre>\n</div>\n<p>is equivalent to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- get(x,envir=parent.env(), inherits=TRUE)\n`*tmp*`[is.na(x)] &lt;- 0\nx &lt;&lt;- `*tmp*`\nrm(`*tmp*`)</code></pre>\n</div>\n<p>and not to</p>\n<div class=\"example\">\n<pre class=\"example1\"><code>`*tmp*` &lt;- get(x,envir=parent.env(), inherits=TRUE)\n`*tmp*`[is.na(`*tmp*`)] &lt;- 0\nx &lt;&lt;- `*tmp*`\nrm(`*tmp*`)</code></pre>\n</div>\n<p>These two candidate interpretations differ only if there is also a local variable <code class=\"calibre7\">x</code>. It is a good idea to avoid having a local variable with the same name as the target variable of a superassignment. As this case was handled incorrectly in versions 1.9.1 and earlier there must not be a serious need for such code.</p>\n<hr />\n<p><a href=\"\" id=\"Scope-of-variables\"></a> <a href=\"\" id=\"Scope-of-variables-1\"></a></p>\n<h3 id=\"scope-of-variables\" class=\"section\">3.5 Scope of variables</h3>\n<p><a href=\"\" id=\"index-scope\"></a> <a href=\"\" id=\"index-name-4\"></a></p>\n<p>Almost every programming language has a set of scoping rules, allowing the same name to be used for different objects. This allows, e.g., a local variable in a function to have the same name as a global object.</p>\n<p>R uses a <em>lexical scoping</em> model, similar to languages like Pascal. However, R is a <em>functional programming language</em> and allows dynamic creation and manipulation of functions and language objects, and has additional features reflecting this fact.</p>\n<hr />\n<p><a href=\"\" id=\"Global-environment\"></a> <a href=\"\" id=\"Global-environment-1\"></a></p>\n<h4 id=\"global-environment\" class=\"subsection\">3.5.1 Global environment</h4>\n<p>The global <a href=\"\" id=\"index-environment-5\"></a> environment is the root of the user workspace. An <a href=\"\" id=\"index-assignment-4\"></a> assignment operation from the command line will cause the relevant object to belong to the global environment. Its enclosing environment is the next environment on the search path, and so on back to the empty environment that is the enclosure of the base environment.</p>\n<hr />\n<p><a href=\"\" id=\"Lexical-environment\"></a> <a href=\"\" id=\"Lexical-environment-1\"></a></p>\n<h4 id=\"lexical-environment\" class=\"subsection\">3.5.2 Lexical environment</h4>\n<p>Every call to a <a href=\"\" id=\"index-function-8\"></a> function creates a <a href=\"\" id=\"index-frame\"></a> <a href=\"\" id=\"index-environment-6\"></a> <em>frame</em> which contains the local variables created in the function, and is evaluated in an environment, which in combination creates a new environment.</p>\n<p>Notice the terminology: A frame is a set of variables, an environment is a nesting of frames (or equivalently: the innermost frame plus the enclosing environment).</p>\n<p>Environments may be assigned to variables or be contained in other objects. However, notice that they are not standard objects—in particular, they are not copied on assignment.</p>\n<p>A closure (mode <code class=\"calibre7\">&quot;function&quot;</code>) object will contain the environment in which it is created as part of its definition (By default. The environment can be manipulated using <code class=\"calibre7\">environment&lt;-</code>). When the function is subsequently called, its <a href=\"\" id=\"index-environment_002c-evaluation\"></a> evaluation environment is created with the closure’s environment as enclosure. Notice that this is not necessarily the environment of the caller!</p>\n<p>Thus, when a variable is requested inside a <a href=\"\" id=\"index-function-9\"></a> function, it is first sought in the <a href=\"\" id=\"index-environment_002c-evaluation-1\"></a> evaluation environment, then in the enclosure, the enclosure of the enclosure, etc.; once the global environment or the environment of a package is reached, the search continues up the search path to the environment of the base package. If the variable is not found there, the search will proceed next to the empty environment, and will fail.</p>\n<hr />\n<p><a href=\"\" id=\"Stacks\"></a> <a href=\"\" id=\"The-call-stack\"></a></p>\n<h4 id=\"the-call-stack\" class=\"subsection\">3.5.3 The call stack</h4>\n<p>Every time a <a href=\"\" id=\"index-function-10\"></a> function is invoked a new evaluation frame is created. At any point in time during the computation the currently active environments are accessible through the <em>call stack</em>. Each time a function is invoked a special construct called a context is created internally and is placed on a list of contexts. When a function has finished evaluating its context is removed from the call stack.</p>\n<p>Making variables defined higher up the call stack available is called <a href=\"\" id=\"index-scope-1\"></a> dynamic scope. The binding for a variable is then determined by the most recent (in time) definition of the variable. This contradicts the default scoping rules in R, which use the bindings in the <a href=\"\" id=\"index-environment-7\"></a> environment in which the function was defined (lexical scope). Some functions, particularly those that use and manipulate model formulas, need to simulate dynamic scope by directly accessing the call stack.</p>\n<p>Access to the <a href=\"\" id=\"index-call-stack\"></a> call stack is provided through a family of functions which have names that start with ‘sys.’. They are listed briefly below.</p>\n<p><a href=\"\" id=\"index-evaluation\"></a></p>\n<dl>\n<dt><code class=\"calibre7\">sys.call</code></dt>\n<dd><p>Get the call for the specified context.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.frame</code></dt>\n<dd><p>Get the evaluation frame for the specified context.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.nframe</code></dt>\n<dd><p>Get the environment frame for all active contexts.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.function</code></dt>\n<dd><p>Get the function being invoked in the specified context.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.parent</code></dt>\n<dd><p>Get the parent of the current function invocation.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.calls</code></dt>\n<dd><p>Get the calls for all the active contexts.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.frames</code></dt>\n<dd><p>Get the evaluation frames for all the active contexts.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.parents</code></dt>\n<dd><p>Get the numeric labels for all active contexts.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.on.exit</code></dt>\n<dd><p>Set a function to be executed when the specified context is exited.</p>\n</dd>\n<dt><code class=\"calibre7\">sys.status</code></dt>\n<dd><p>Calls <code class=\"calibre7\">sys.frames</code>, <code class=\"calibre7\">sys.parents</code> and <code class=\"calibre7\">sys.calls</code>.</p>\n</dd>\n<dt><code class=\"calibre7\">parent.frame</code></dt>\n<dd><p>Get the evaluation frame for the specified parent context.</p>\n</dd>\n</dl>\n<hr />\n<p><a href=\"\" id=\"Search-path\"></a> <a href=\"\" id=\"Search-path-1\"></a></p>\n<h4 id=\"search-path\" class=\"subsection\">3.5.4 Search path</h4>\n<p>In addition to the evaluation <a href=\"\" id=\"index-environment-8\"></a> <a href=\"\" id=\"index-search-path\"></a> environment structure, R has a search path of environments which are searched for variables not found elsewhere. This is used for two things: packages of functions and attached user data.</p>\n<p>The first element of the search path is the global environment and the last is the base package. An <code class=\"calibre7\">Autoloads</code> environment is used for holding proxy objects that may be loaded on demand. Other environments are inserted in the path using <code class=\"calibre7\">attach</code> or <code class=\"calibre7\">library</code>.</p>\n<p><a href=\"\" id=\"index-namespace\"></a></p>\n<p>Packages which have a <em>namespace</em> have a different search path. When a search for an R object is started from an object in such a package, the package itself is searched first, then its imports, then the base namespace and finally the global environment and the rest of the regular search path. The effect is that references to other objects in the same package will be resolved to the package, and objects cannot be masked by objects of the same name in the global environment or in other packages.</p>\n<hr />\n<p><a href=\"\" id=\"Functions\"></a> <a href=\"\" id=\"Functions-1\"></a></p>\n<div id=\"calibre_pb_9\" class=\"calibre5\">\n\n</div>\n\n&#36;\n&#36;&#36;\n&#36;\n"
